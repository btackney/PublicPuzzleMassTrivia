{"changed":true,"filter":false,"title":"maintain.js","tooltip":"/client/js/maintain.js","value":"/*global PIXI*/\n/*global io*/\n/*global ion*/\n/*global $*/\n\nvar mysocket = null;\n\nvar questionsLength;\nvar currentIndex;\nvar currentLength;\nvar saveShowQuestions = [];\n\nvar connectstring = \"http://\" + window.location.host + \":3000\";\nif (window.location.host.search(\"publicpuzzle-pasciaks\") > -1) connectstring = \"\"; // this means if on dev server use blank connection string\n\nvar socket = io.connect(connectstring); // io.connect('http://publicpuzzle.com:3000');\n\n$(document).ready(function(){\n    \n// function resumeBroadcasts() {\n//   var data = Date.now();\n//   if (mysocket) mysocket.emit(\"PROF_RESUME\", data);\n// }\n\n// function pauseBroadcasts() {\n//   var data = Date.now();\n//   if (mysocket) mysocket.emit(\"PROF_PAUSE\", data);\n// }\n\n// function nextQuestion() {\n//   var data = Date.now();\n//   if (mysocket) mysocket.emit(\"PROF_NEXT_QUESTION\", data);\n// }\n\n// $('#prevQuestion').click(function(e) {\n//     prevQuestion();\n//     e.preventDefault();\n//   }\n// );\n\n// $('#nextQuestion').click(function(e) {\n//     nextQuestion();\n//     e.preventDefault();\n//   }\n// );\n\n// $('#pauseBroadcasts').click(function(e) {\n//     pauseBroadcasts();\n//     e.preventDefault();\n//   }\n// );\n\n$('#deleteQuestion').click(function(e) {\n\n    socket.emit(\"REMOVE_QUESTION\", { 'index': currentIndex } );\n    currentIndex--;if (currentIndex<0) currentIndex=0;\n    socket.emit(\"MAINTENANCE_OPEN\", currentIndex);\n    e.preventDefault();\n  }\n);\n\n// $('#resumeBroadcasts').click(function(e) {\n//     resumeBroadcasts();\n//     e.preventDefault();\n//   }\n// );\n    \n    $(\"#Login\").click(function(){\n        //alert(\"login clicked\");\n        var adminusername = $(\"#username\").val();\n        var adminpassword = $(\"#password\").val();\n        validateLogin(adminusername, adminpassword);\n    });\n    \n     $(\"#newQuestion\").click(function(){\n         getQuestion();\n     });\n     $(\"#prevQ\").click(function(){\n         socket.emit(\"MAINTENANCE_OPEN\", currentIndex-1);\n     });\n     $(\"#nextQ\").click(function(){\n         socket.emit(\"MAINTENANCE_OPEN\", currentIndex+1);\n     });\n     $(\"#jumpQ\").click(function(){\n         var jumpNum = $(\"#jumpNumber\").val();\n         socket.emit(\"MAINTENANCE_OPEN\", jumpNum);\n     });\n    \n});\n\n\n// function editQuestion(){//todo send edited question to server or new question\n//   var Data;\n//   if (mysocket) mysocket.emit(\"PROF_GET_QUESTIONS\", data);\n// }\n\n\nfunction clearForm(){\n    $(\"#question\").val(\"\");\n    $(\"#choice1\").val(\"\");\n    $(\"#choice2\").val(\"\");\n    $(\"#choice3\").val(\"\");\n    $(\"#choice4\").val(\"\");\n    $(\"#qTime\").val(\"\");\n    $(\"#imgURL\").val(\"\");\n}\n\nfunction populateForm(data){\n    $(\"#question\").val(data.theQuestion);\n    $(\"#choice1\").val(data.choice1);\n    $(\"#choice2\").val(data.choice2);\n    $(\"#choice3\").val(data.choice3);\n    $(\"#choice4\").val(data.choice4);\n    $(\"#qTime\").val(data.qTime);\n    $(\"#imgURL\").val(data.imgURL);\n}\n\nfunction isNumber( input ) {\n    return !isNaN( input );\n}\n\nfunction getQuestion(){\n    \n  var theQuestion = $(\"#question\").val();\n  var choice1 = $(\"#choice1\").val();\n  var choice2 = $(\"#choice2\").val();\n  var choice3 = $(\"#choice3\").val();\n  var choice4 = $(\"#choice4\").val();\n  \n    // if(choice1.substring(0, 4) == 'http'){//make an image outa me\n    //     // choice1 = new img(100,100);\n    //     // choice1 = choice1 +'.png';\n    //     // $(\"#showMyImage\").append(choice1);\n    //      var img = $('<img />', {src : choice1 +'.png'});\n    //      img.appendTo('body');\n    // }  \n  \n  var qTime = $(\"#qTime\").val();\n  var img = $(\"#imgURL\").val();\n  \n  if(theQuestion == \"\" || choice1 == \"\" || qTime == \"\"){\n      alert(\"must fill out question, choice1, and timer\");\n      return false;\n  }\n  if(isNumber(qTime) == false){\n      alert(\"Please input Number\"); \n      return false; \n  }\n  if(qTime < 1000){\n        alert(\"please enter valid time, must be a number > 999\");\n        return false;\n  }\n\n  sendQuestion(currentIndex, theQuestion, choice1, choice2, choice3, choice4, qTime , img);\n\n}\n\nfunction sendQuestion(theIndex, theQuestion, choice1, choice2, choice3, choice4, qTime, img){\n    console.log(\"sending question\", theQuestion, choice1, choice2, choice3, choice4, qTime);\n    \n    if (mysocket) socket.emit(\"NEW_QUESTION\",{\n        'theIndex': theIndex,\n        'theQuestion': theQuestion,\n        'choice1': choice1,\n        'choice2': choice2,\n        'choice3': choice3,\n        'choice4': choice4,\n        'qTime': qTime,\n        'imgURL': img\n    });\n}\n\nfunction validateLogin(adminusername, adminpassword){\n    console.log(adminusername, adminpassword);\n    if (mysocket) socket.emit(\"MAINTENANCE_LOGIN_INFO\", {\n            'adminusername': adminusername,\n            'adminpassword': adminpassword\n        });\n}\n\nsocket.on('connect', function() {\n  \n    mysocket = socket;\n    \n      socket.on(\"VALIDATE_MAINTENANCE_LOGIN\", function(data){\n        \n        if(data == true){\n            $(\"#maintenanceLogin\").hide();//css(\"display\", \"none\");\n            $(\"#maintenanceForm\").show();//css(\"display\", \"\");\n\n            socket.emit(\"MAINTENANCE_OPEN\", -2);//emit 0 to recognize not querying for specific index info\n        } \n        else{\n            alert(\"Bad username or password\");\n        }\n    });\n    \n    socket.on(\"CURRENT_MAINTENANCE_INDEX\", function(data){\n        currentIndex = data.index;\n        //alert(\"main.js in currentmaintenance\" + data);\n        $(\"#currentIndex\").html(\"Current Index: \" + currentIndex + \"<br />\");\n        populateForm(data);\n    });\n    \n    socket.on(\"NEW_QUESTION_RESPONSE\", function(data){\n\n        currentLength = data.newLength;\n\n        if(data.index == data.oldLength){\n            clearForm();\n            currentIndex =data.newLength;\n        }\n        else{\n            currentIndex = data.index;\n        }\n        \n        $(\"#currentIndex\").html(\"Current Index: \" + currentIndex + \"<br />\");\n        //showQuestions(data);\n    });\n    \n    socket.on(\"MAINTENANCE_SHOW_QUESTIONS\", function(data){\n        var showQuestions = new Object();\n        showQuestions.index = data.showIndex;\n        showQuestions.theQuestion = data.showQuestion;\n         \n        if(data.showIndex > -1 && data.showIndex < currentLength){\n            saveShowQuestions[data.showIndex] = showQuestions;\n            $(\"#showQuestions\").html(\"\");\n            //for(var i = 0; i < saveShowQuestions.length; i++){\n            //    $(\"#showQuestions\").append(\"</br>\" + saveShowQuestions[i].index + \": \");\n            //    $(\"#showQuestions\").append(saveShowQuestions[i].theQuestion);\n            //}\n        }\n        else{\n            saveShowQuestions.push(showQuestions);\n            //$(\"#showQuestions\").append(\"</br>\" + showQuestions.index + \": \");\n            //$(\"#showQuestions\").append(data.showQuestion);\n        }\n    });\n\n});","undoManager":{"mark":-1,"position":-1,"stack":[]},"ace":{"folds":[],"scrolltop":586.1818181818181,"scrollleft":0,"selection":{"start":{"row":52,"column":40},"end":{"row":52,"column":40},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":52,"state":"start","mode":"ace/mode/javascript"}},"timestamp":1478036467974}